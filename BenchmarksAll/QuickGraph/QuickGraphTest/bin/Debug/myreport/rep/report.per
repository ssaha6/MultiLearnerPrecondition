<?xml version="1.0" encoding="utf-8"?>
<pex id="{e8afde39-3c34-4dd7-ad69-04ba569bb653}" creationTime="2018-11-16 15:09:15Z" configuration="QuickGraphTest!\BinaryHeapCommuteTest!\PUT_CommutativityMinimumRemoveMinimumComm!" product="QuickGraph" created="2018-11-16 15:09:15Z" pexVersion="0.94.51006.1" xml="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\myreport\rep\report.per" html="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\myreport\rep\report.html"><environment commandLine="&quot;C:\Program Files (x86)\Microsoft Pex\bin\Microsoft.Pex.x86.exe&quot; BenchmarksAll/QuickGraph/QuickGraphTest/bin/Debug/QuickGraphTest.dll /methodnamefilter:PUT_CommutativityMinimumRemoveMinimumComm! /namespacefilter:QuickGraphTest! /typefilter:BinaryHeapCommuteTest! /noconsole /targetx86 /donotopenreport /reportname:rep /reportrootpath:myreport" machineName="YOGA15" osVersion="Microsoft Windows NT 6.2.9200.0" processorCount="8" clrVersion="4.0.30319.42000" bitness="x86" user="me"><envVars><envVar name="_" value="/cygdrive/c/install/Python27/python"/>
<envVar name="COR_PROFILER" value="{21bbb412-71ac-41f9-a377-48529a4859cf}"/>
<envVar name="ConEmuPID" value="13492"/>
<envVar name="PUBLIC" value="C:\Users\Public"/>
<envVar name="USERPROFILE" value="C:\Users\me"/>
<envVar name="ALLUSERSPROFILE" value="C:\ProgramData"/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="LOGONSERVER" value="\\YOGA15"/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="INFOPATH" value="/usr/local/info:/usr/share/info:/usr/info"/>
<envVar name="LOCALAPPDATA" value="C:\Users\me\AppData\Local"/>
<envVar name="ConEmuDir" value="C:\install\cmder\vendor\conemu-maximus5"/>
<envVar name="ConEmuTask" value="{cygwin}"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="FSharp.Core,FSharp.PowerPack,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,QuickGraph,QuickGraphTest,System,System.Core,System.Web"/>
<envVar name="ConEmuHWND" value="0x000C0D5C"/>
<envVar name="TZ" value="America/Chicago"/>
<envVar name="OneDrive" value="C:\Users\me\OneDrive"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0xa"/>
<envVar name="ORIGINAL_PATH" value="/cygdrive/c/install/cmder/vendor/conemu-maximus5/ConEmu/Scripts:/cygdrive/c/install/cmder/vendor/conemu-maximus5:/cygdrive/c/install/cmder/vendor/conemu-maximus5/ConEmu:/cygdrive/c/Program Files/Docker/Docker/Resources/bin:/cygdrive/c/install/Python27:/cygdrive/c/install/Python27/Scripts:/cygdrive/c/install/Python37/Scripts:/cygdrive/c/install/Python37:/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS:/cygdrive/c/WINDOWS/System32/Wbem:/cygdrive/c/WINDOWS/System32/WindowsPowerShell/v1.0:/cygdrive/c/WINDOWS/System32/OpenSSH:/cygdrive/c/install/nodejs:/cygdrive/c/install/cmder:/cygdrive/c/install/subl:/cygdrive/c/install/VSCode-insider/bin:/cygdrive/c/install/calibre:/cygdrive/c/install/cmake/bin:/cygdrive/c/install/go/bin:/cygdrive/c/install/graphviz-2.38/bin:/cygdrive/c/install/Tower:/usr/bin:/:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/install/lxrunoffline:/cygdrive/d/Chrome/install/texlive/bin/win32:/cygdrive/d/Chrome/install/android-sdk/platform-tools:/cygdrive/d/Chrome/nox/Nox/bin:/cygdrive/c/install/nirsoft:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Microsoft SQL Server/130/Tools/Binn:/cygdrive/c/Program Files (x86)/Microsoft SQL Server/100/Tools/Binn:/cygdrive/c/Program Files/Microsoft SQL Server/100/Tools/Binn:/cygdrive/c/Program Files/Microsoft SQL Server/100/DTS/Binn:/cygdrive/c/Users/me/AppData/Roaming/Composer/vendor/bin:/cygdrive/c/Program Files (x86)/Microsoft Visual Studio 10.0/Common7/IDE:/cygdrive/c/install/nodejs:/cygdrive/c/Program Files (x86)/Common Files/GTK/2.0/bin:/cygdrive/c/Windows/Microsoft.NET/Framework/v4.0.30319:/cygdrive/c/install/Java/jre1.8.0/bin:/cygdrive/c/install/Java/jdk-11.0.1/bin:/cygdrive/c/install/Meld/Scripts:/cygdrive/c/install/idea/bin:/cygdrive/c/install/CodeCompare:/cygdrive/c/install/cloc:/cygdrive/c/Program Files (x86)/Windows Kits/10/Windows Performance Toolkit:/cygdrive/c/install/Git/cmd:/cygdrive/d/z3/z3-4.8.1-win/bin:/cygdrive/c/install/ctags58:/cygdrive/c/Program Files (x86)/Microsoft Pex/bin:/cygdrive/c/Users/me/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/me/AppData/Roaming/npm:/cygdrive/c/Users/me/.dotnet/tools:/cygdrive/c/Users/me/AppData/Local/Programs/radare2"/>
<envVar name="ConEmuBaseDir" value="C:\install\cmder\vendor\conemu-maximus5\ConEmu"/>
<envVar name="VBOX_MSI_INSTALL_PATH" value="C:\Program Files\Oracle\VirtualBox\"/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="SESSIONNAME" value="Console"/>
<envVar name="ProgramW6432" value="C:\Program Files"/>
<envVar name="ConEmuServerPID" value="19608"/>
<envVar name="SYSTEMROOT" value="C:\WINDOWS"/>
<envVar name="ConEmuCfgDir" value="C:\install\cmder\vendor\conemu-maximus5"/>
<envVar name="SHELL" value="/bin/bash"/>
<envVar name="VISUALGDB_DIR" value="C:\Program Files (x86)\Sysprogs\VisualGDB\"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="x86"/>
<envVar name="ANSICON" value="170x9999 (170x82)"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="SHLVL" value="1"/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW"/>
<envVar name="JAVA_HOME" value="C:\install\Java\jdk-11.0.1"/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="CommonProgramW6432" value="C:\Program Files\Common Files"/>
<envVar name="ProgramFiles(x86)" value="C:\Program Files (x86)"/>
<envVar name="COMSPEC" value="C:\WINDOWS\system32\cmd.exe"/>
<envVar name="USERNAME" value="me"/>
<envVar name="ANDROID_HOME" value="D:\Chrome\install\android-sdk"/>
<envVar name="chromedatadir" value="--user-data-dir=&quot;D:\Chrome\chrome_data_dir&quot;"/>
<envVar name="ConEmuPalette" value="&lt;Tomorrow&gt;"/>
<envVar name="VS100COMNTOOLS" value="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="TERM" value="cygwin"/>
<envVar name="LANG" value="en_US.UTF-8"/>
<envVar name="USER" value="me"/>
<envVar name="PROMPT" value="$P$G"/>
<envVar name="ANSICON_DEF" value="7"/>
<envVar name="VSSDK100Install" value="C:\Program Files (x86)\Microsoft Visual Studio 2010 SDK SP1\"/>
<envVar name="PATH" value="C:\Program Files\mingw-w64\x86_64-7.2.0-posix-seh-rt_v5-rev1\mingw64\bin\;C:\cygwin64\usr\local\bin;C:\cygwin64\bin;C:\install\cmder\vendor\conemu-maximus5\ConEmu\Scripts;C:\install\cmder\vendor\conemu-maximus5;C:\install\cmder\vendor\conemu-maximus5\ConEmu;C:\Program Files\Docker\Docker\Resources\bin;C:\install\Python27;C:\install\Python27\Scripts;C:\install\Python37\Scripts;C:\install\Python37;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0;C:\WINDOWS\System32\OpenSSH;C:\install\nodejs;C:\install\cmder;C:\install\subl;C:\install\VSCode-insider\bin;C:\install\calibre;C:\install\cmake\bin;C:\install\go\bin;C:\install\graphviz-2.38\bin;C:\install\Tower;C:\cygwin64\bin;C:\cygwin64;C:\ProgramData\chocolatey\bin;C:\install\lxrunoffline;D:\Chrome\install\texlive\bin\win32;D:\Chrome\install\android-sdk\platform-tools;D:\Chrome\nox\Nox\bin;C:\install\nirsoft;C:\Program Files\dotnet;C:\Program Files\Microsoft SQL Server\130\Tools\Binn;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn;C:\Program Files\Microsoft SQL Server\100\Tools\Binn;C:\Program Files\Microsoft SQL Server\100\DTS\Binn;C:\Users\me\AppData\Roaming\Composer\vendor\bin;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE;C:\install\nodejs;C:\Program Files (x86)\Common Files\GTK\2.0\bin;C:\Windows\Microsoft.NET\Framework\v4.0.30319;C:\install\Java\jre1.8.0\bin;C:\install\Java\jdk-11.0.1\bin;C:\install\Meld\Scripts;C:\install\idea\bin;C:\install\CodeCompare;C:\install\cloc;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit;C:\install\Git\cmd;D:\z3\z3-4.8.1-win\bin;C:\install\ctags58;C:\Program Files (x86)\Microsoft Pex\bin;C:\Users\me\AppData\Local\Microsoft\WindowsApps;C:\Users\me\AppData\Roaming\npm;C:\Users\me\.dotnet\tools;C:\Users\me\AppData\Local\Programs\radare2"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value="Microsoft.VisualBasic"/>
<envVar name="WINDIR" value="C:\WINDOWS"/>
<envVar name="ConEmuDrive" value="C:"/>
<envVar name="PSModulePath" value="C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules"/>
<envVar name="PROCESSOR_REVISION" value="9e09"/>
<envVar name="ChocolateyInstall" value="C:\ProgramData\chocolatey"/>
<envVar name="APPDATA" value="C:\Users\me\AppData\Roaming"/>
<envVar name="pex_appdir" value="C:\Program Files (x86)\Microsoft Pex\bin"/>
<envVar name="FPS_BROWSER_APP_PROFILE_STRING" value="Internet Explorer"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Linq.Expressions.ExpressionCompiler,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,System.Xml.XmlWriter+&lt;WriteAttributeStringAsyncHelper&gt;d__82,System.Xml.XmlWriter+&lt;WriteAttributesAsync&gt;d__102,System.Xml.XmlWriter+&lt;WriteElementStringAsync&gt;d__107,System.Xml.XmlWriter+&lt;WriteLocalNamespacesAsync&gt;d__108,System.Xml.XmlWriter+&lt;WriteNodeAsync&gt;d__106,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallAsyncReader&gt;d__105,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallSyncReader&gt;d__104,System.Xml.XmlWriter+&lt;WriteQualifiedNameAsync&gt;d__101,__Box`1,__SzArrayHelper`1"/>
<envVar name="COMPUTERNAME" value="YOGA15"/>
<envVar name="chromeopt" value="--ignore-certificate-errors --purge-memory-button    --emphasize-titles-in-omnibox-dropdown --enable-app-window-cycling --enable-bookmark-reordering --enable-browser-side-navigation --enable-cast-receiver --enable-dom-distiller --enable-distillability-service  --enable-file-manager-touch-mode  --enable-local-file-accesses --enable-longpress-drag-selection  --enable-password-generation --enable-picture-in-picture  --enable-pinch --enable-power-overlay --enable-reader-mode-toolbar-icon --enable-spatial-navigation --enable-tablet-splitview --enable-touch-calibration-setting --enable-touch-drag-drop --enable-touchview  --enable-web-notification-custom-layouts  --enable-zip-archiver-on-file-manager  --material-hybrid  --reader-mode-heuristics --top-chrome-md --windows10-custom-titlebar  "/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="TEMP" value="C:\cygwin64\tmp"/>
<envVar name="CommonProgramFiles(x86)" value="C:\Program Files (x86)\Common Files"/>
<envVar name="EXECIGNORE" value="*.dll"/>
<envVar name="FPS_BROWSER_USER_PROFILE_STRING" value="Default"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="ConEmuBuild" value="180528"/>
<envVar name="ChocolateyLastPathUpdate" value="Mon Aug 20 09:30:38 2018"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="ProgramData" value="C:\ProgramData"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="PROGRAMFILES" value="C:\Program Files (x86)"/>
<envVar name="OLDPWD" value="/cygdrive/d"/>
<envVar name="USERDOMAIN_ROAMINGPROFILE" value="YOGA15"/>
<envVar name="PROCESSOR_IDENTIFIER" value="Intel64 Family 6 Model 158 Stepping 9, GenuineIntel"/>
<envVar name="ConEmuWorkDrive" value="C:"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="ChocolateyToolsLocation" value="C:\tools"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="TMP" value="C:\cygwin64\tmp"/>
<envVar name="PRINTER" value="Brother HL-L2340D series Printer"/>
<envVar name="CodeContractsInstallDir" value="c:\Program Files (x86)\Microsoft\Contracts\"/>
<envVar name="HOSTNAME" value="Yoga15"/>
<envVar name="ConEmuANSI" value="ON"/>
<envVar name="ConEmuBaseDirShort" value="C:\install\cmder\vendor\conemu-maximus5\ConEmu"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll,C:\WINDOWS\assembly\GAC_MSIL\Microsoft.Pex.Linq\0.94.0.0__31bf3856ad364e35\Microsoft.Pex.Linq.dll"/>
<envVar name="USERDOMAIN" value="YOGA15"/>
<envVar name="NUMBER_OF_PROCESSORS" value="8"/>
<envVar name="PS1" value="\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n\$ "/>
<envVar name="ConEmuWorkDir" value="C:\Users\me"/>
<envVar name="SYSTEMDRIVE" value="C:"/>
<envVar name="PWD" value="/cygdrive/d/experimental3"/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="DriverData" value="C:\Windows\System32\Drivers\DriverData"/>
<envVar name="COMMONPROGRAMFILES" value="C:\Program Files (x86)\Common Files"/>
<envVar name="HOMEPATH" value="\Users\me"/>
<envVar name="JAVA_OPTS" value="-Xlint:none"/>
<envVar name="CLRMONITOR_CLSID" value="{21bbb412-71ac-41f9-a377-48529a4859cf}"/>
<envVar name="HOME" value="C:\Users\me"/>
<envVar name="GIT_LFS_PATH" value="C:\install\GitLFS"/>
<envVar name="PROCESSOR_ARCHITEW6432" value="AMD64"/>
<envVar name="ConEmuBackHWND" value="0x01811EE6"/>
<envVar name="ConEmuDrawHWND" value="0x00571E20"/>
<envVar name="PROFILEREAD" value="true"/>
<envVar name="ConEmuHooks" value="Enabled"/>
<envVar name="PYTHONOPATH" value="D:\z3\z3-4.8.1-win\bin\python"/>
</envVars>
</environment>
<settings/>
<reflection/>
<assembly name="QuickGraphTest" version="1.0.0.0" fileVersion="1.0.0.0" fullName="QuickGraphTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraphTest.dll" fileName="QuickGraphTest.dll" testProject="tests\quickgraphtest.csproj"><settings testFramework="VisualStudioUnitTest"/>
<fixture name="BinaryHeapCommuteTest" type="QuickGraphTest.BinaryHeapCommuteTest" typeName="BinaryHeapCommuteTest" token="2000002" href="fix\QuickGraphTest.101.html"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
</type>
<settings typeUnderTest="System.Tuple`2"/>
<exploration shortName="PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;)" fullName="QuickGraphTest.BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;)"><method><definition assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumComm" token="6000017"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
</type>
</parameter>
<parameter name="bhTuple" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
</definition>
</method>
<memberUnderTest assemblyName="mscorlib" name="Item1" token="1700003c"><declaringType assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</declaringType>
<propertyType spec="GenericTypeParameter" index="0"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</type>
</parameter>
</memberUnderTest>
<memberUnderTest assemblyName="mscorlib" name="Item2" token="1700003d"><declaringType assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</declaringType>
<propertyType spec="GenericTypeParameter" index="1"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</type>
</parameter>
</memberUnderTest>
<log level="message" time="2018-11-16 15:09:17Z" category="symbols" message="could not load symbols for C:\WINDOWS\assembly\GAC_MSIL\Microsoft.Pex\0.94.0.0__31bf3856ad364e35\Microsoft.Pex.exe"/>
<log level="message" time="2018-11-16 15:09:17Z" category="symbols" message="search path: ;"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.09"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.14"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.08"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.03"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.09"/>
<generatedTest id="d6531184-befa-48dd-baad-b275baeaa8d8" index="1" run="8" exceptionState="unexpected" status="exception" failed="true" failureText="Exception not validated by documented, contract requires failure at type-under-test surface." generated="true" new="true" assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumCommThrowsInvalidOperationException43"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="ffffffff" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="ffffffff" namespace="QuickGraphTest"/>
</type>
</parameter>
<rcov name="Block" dcov="9" dtot="20" acov="9" atot="20"/>
<rcov name="asserts" dcov="0" dtot="1" acov="0" atot="1"/>
<value name="bhTuple">(QuickGraph.BinaryHeap`2[System.Int32,System.Int32], QuickGraph.BinaryHeap`2[System.Int32,System.Int32])</value>
<value name="$input_Count">0</value>
<value name="$input_Capacity">1</value>
<value name="$input_MinimumPriority">-12</value>
<code><![CDATA[Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> tuple;
KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[0];
tuple = BinaryHeapFactory.CreateBinaryHeapKeyValPair(keyValuePairs, 1);
this.PUT_CommutativityMinimumRemoveMinimumComm(tuple);
]]></code>
<methodCode imports="QuickGraph;System;System.Collections.Generic;QuickGraphTest.Factories;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(BinaryHeapCommuteTest))]
[PexRaisedException(typeof(InvalidOperationException))]
public void PUT_CommutativityMinimumRemoveMinimumCommThrowsInvalidOperationException43()
{
    Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> tuple;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[0];
    tuple = BinaryHeapFactory.CreateBinaryHeapKeyValPair(keyValuePairs, 1);
    this.PUT_CommutativityMinimumRemoveMinimumComm(tuple);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="QuickGraphTest" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraphTest.dll"/>
<reference name="QuickGraph" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraph.dll"/>
<exceptionChain><exception typeDisplayName="InvalidOperationException" source="QuickGraph"><message><![CDATA[Operation is not valid due to the current state of the object.]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="InvalidOperationException" token="2000100" namespace="System"/>
</type>
<stackTrace><frame value="  at BinaryHeap`2.Minimum() in d:\experimental3\BenchmarksAll\QuickGraph\QuickGraph\BinaryHeap.cs(108)" method="BinaryHeap`2.Minimum()" offset="22" file="d:\experimental3\BenchmarksAll\QuickGraph\QuickGraph\BinaryHeap.cs" line="108"><method assemblyName="QuickGraph" name="Minimum" token="600000a"><declaringType assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="KeyValuePair`2" token="20004ae" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</resultType>
</method>
<beforeSource><![CDATA[        {
            //NotpAssume.IsTrue(this.count >0);
            if (this.count == 0)]]></beforeSource>
<source><![CDATA[                throw new InvalidOperationException();]]></source>
<afterSource><![CDATA[            return this.items[0];
        }
]]></afterSource>
</frame>
<frame value="  at BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;) in d:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\BinaryHeapCommuteTest.cs(742)" method="BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;)" offset="119" file="d:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\BinaryHeapCommuteTest.cs" line="742"><method assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumComm" token="6000017"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
</type>
</parameter>
<parameter name="bhTuple" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            AssumePrecondition.IsTrue(!((( false ))));
]]></beforeSource>
<source><![CDATA[            var m1 = bh1.Minimum();]]></source>
<afterSource><![CDATA[            var rm1 = bh1.RemoveMinimum();

            var rm2 = bh2.RemoveMinimum();]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<fix rank="5" testid="d6531184-befa-48dd-baad-b275baeaa8d8" kind="precondition" shortMethodNameWithParameters="BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;)" imports="Microsoft.ExtendedReflection.Collections.SafeSet`1[System.String]"><reference name="Microsoft.Pex.Framework"/>
<reference name="mscorlib"/>
<reference name="Microsoft.ExtendedReflection"/>
<method><definition assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumComm" token="6000017"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
</type>
</parameter>
<parameter name="bhTuple" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
</definition>
</method>
<code><![CDATA[PexAssume.IsTrue(bhTuple.Item1.count != 0, "bhTuple.Item1.count == 0");
]]></code>
</fix>
<pathCondition><![CDATA[Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> s2 = new;
BinaryHeap<int, int> s3 = new;
BinaryHeap<int, int> s1 = bhTuple == s2 ? s3 : bhTuple.m_Item1;
BinaryHeap<int, int> s0 = s1;
BinaryHeap<int, int> s5 = new;
BinaryHeap<int, int> s4 = s0 == s3 ? s3 : s0 == s5 ? s5 : (BinaryHeap<int, int>)(s0.items);
int s6 = s0 == s3 ? 0 : s0 == s5 ? 0 : s0.count;
return capacity < 11 && 0 < capacity && pairs != (KeyValuePair<int, int>[])null && 
                                        pairs.Length < 1 && bhTuple != (Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>>)null && s0 != (BinaryHeap<int, int>)null && s4 != (BinaryHeap<int, int>)null && s6 == 0;
]]></pathCondition>
</generatedTest>
<log level="message" time="2018-11-16 15:09:18Z" category="coverage" message="coverage increased from 0 to 9 blocks (+9) after flipping QuickGraphTest.BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm at 0x0002"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<log level="message" time="2018-11-16 15:09:19Z" category="summaries" message="using summary for Int32.CompareTo(Int32)"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.18"/>
<generatedTest id="52bb50a0-feb1-47e0-af5a-10b679957ce0" index="2" run="10" status="normaltermination" generated="true" new="true" assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumComm99"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="ffffffff" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="ffffffff" namespace="QuickGraphTest"/>
</type>
</parameter>
<rcov name="Block" dcov="40" dtot="83" acov="49" atot="103"/>
<rcov name="asserts" dcov="1" dtot="0" acov="1" atot="1"/>
<value name="bhTuple">(QuickGraph.BinaryHeap`2[System.Int32,System.Int32], QuickGraph.BinaryHeap`2[System.Int32,System.Int32])</value>
<value name="$input_Count">2</value>
<value name="$input_Capacity">3</value>
<value name="$input_MinimumPriority">10</value>
<value name="result(bhTuple)">(QuickGraph.BinaryHeap`2[System.Int32,System.Int32], QuickGraph.BinaryHeap`2[System.Int32,System.Int32])</value>
<code><![CDATA[Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> tuple;
KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[2];
KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(10, default(int));
keyValuePairs[0] = s0;
KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(10, default(int));
keyValuePairs[1] = s1;
tuple = BinaryHeapFactory.CreateBinaryHeapKeyValPair(keyValuePairs, 1);
this.PUT_CommutativityMinimumRemoveMinimumComm(tuple);
Assert.IsNotNull((object)tuple);
Assert.IsNotNull(tuple.Item1);
Assert.IsNotNull(tuple.Item1.PriorityComparison);
Assert.AreEqual<int>(3, tuple.Item1.Capacity);
Assert.AreEqual<int>(1, tuple.Item1.Count);
Assert.IsNotNull(tuple.Item2);
Assert.IsNotNull(tuple.Item2.PriorityComparison);
Assert.AreEqual<int>(3, tuple.Item2.Capacity);
Assert.AreEqual<int>(1, tuple.Item2.Count);
]]></code>
<methodCode imports="QuickGraph;System;System.Collections.Generic;QuickGraphTest.Factories;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(BinaryHeapCommuteTest))]
public void PUT_CommutativityMinimumRemoveMinimumComm99()
{
    Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> tuple;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[2];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(10, default(int));
    keyValuePairs[0] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(10, default(int));
    keyValuePairs[1] = s1;
    tuple = BinaryHeapFactory.CreateBinaryHeapKeyValPair(keyValuePairs, 1);
    this.PUT_CommutativityMinimumRemoveMinimumComm(tuple);
    Assert.IsNotNull((object)tuple);
    Assert.IsNotNull(tuple.Item1);
    Assert.IsNotNull(tuple.Item1.PriorityComparison);
    Assert.AreEqual<int>(3, tuple.Item1.Capacity);
    Assert.AreEqual<int>(1, tuple.Item1.Count);
    Assert.IsNotNull(tuple.Item2);
    Assert.IsNotNull(tuple.Item2.PriorityComparison);
    Assert.AreEqual<int>(3, tuple.Item2.Capacity);
    Assert.AreEqual<int>(1, tuple.Item2.Count);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="QuickGraphTest" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraphTest.dll"/>
<reference name="QuickGraph" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraph.dll"/>
<pathCondition><![CDATA[Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> s2 = new;
BinaryHeap<int, int> s3 = new;
BinaryHeap<int, int> s1 = bhTuple == s2 ? s3 : bhTuple.m_Item1;
BinaryHeap<int, int> s0 = s1;
KeyValuePair<int, int>[] s6 = new;
BinaryHeap<int, int> s7 = new;
KeyValuePair<int, int>[] s8 = new;
KeyValuePair<int, int>[] s5 = s0 == s3 ? s6 : s0 == s7 ? s8 : s0.items;
KeyValuePair<int, int>[] s4 = s5;
BinaryHeap<int, int> s10 = bhTuple == s2 ? s7 : bhTuple.m_Item2;
BinaryHeap<int, int> s9 = s10;
int s14 = s9 == s3 ? 2 : s9 == s7 ? 2 : s9.count;
int s13 = s14;
int s12 = s9 == s0 ? 1 : s13;
int s11 = s12;
KeyValuePair<int, int>[] s16 = s9 == s3 ? s6 : s9 == s7 ? s8 : s9.items;
KeyValuePair<int, int>[] s15 = s16;
KeyValuePair<int, int> s22 = default(KeyValuePair<int, int>){.key = pairs[0].key, .value = pairs[0].value};
map<int, KeyValuePair<int, int>> s21 = {default(KeyValuePair<int, int>)}{[unchecked(0)] = s22};
map<int, KeyValuePair<int, int>> s23 = {default(KeyValuePair<int, int>)}{[unchecked(0)] = default(KeyValuePair<int, int>){.key = pairs[1].key, .value = pairs[1].value}, [unchecked(1)] = s22};
map<int, KeyValuePair<int, int>> s20 = s4 == (KeyValuePair<int, int>[])s3 ? s21 : s4 == s6 ? s23 : s4 == (KeyValuePair<int, int>[])s7 ? s21 : s4 == s8 ? s23 : s4;
map<int, KeyValuePair<int, int>> s19 = s20;
KeyValuePair<int, int> s18 = s19[0];
int s17 = s18.key;
map<int, KeyValuePair<int, int>> s30 = __move(__move(s19{[unchecked(0)] = s19[1]}, unchecked(2)){[unchecked(-1)] = s18}, unchecked(-2));
map<int, KeyValuePair<int, int>> s32 = s15 == (KeyValuePair<int, int>[])s3 ? s21 : s15 == s6 ? s23 : s15 == (KeyValuePair<int, int>[])s7 ? s21 : s15 == s8 ? s23 : s15;
map<int, KeyValuePair<int, int>> s31 = s32;
map<int, KeyValuePair<int, int>> s29 = s15 == s4 ? s30 : s31;
map<int, KeyValuePair<int, int>> s28 = s29;
KeyValuePair<int, int> s27 = s28[0];
KeyValuePair<int, int> s26 = -s11 == -1 ? s27 : s28[-1 + s11];
KeyValuePair<int, int> s25 = s26;
int s24 = s25.key;
int s34 = s0 == s9 ? -1 + s11 : 1;
int s33 = s34;
map<int, KeyValuePair<int, int>> s37 = s4 == s15 ? __move(__move(s28{[unchecked(0)] = s28[-1 + s11]}, s11){[unchecked(-1)] = s27}, -s11) : s30;
KeyValuePair<int, int> s36 = s37[0];
int s35 = s36.key;
int s39 = s0 == s3 ? 2 : s0 == s7 ? 2 : s0.count;
int s38 = s39;
int s41 = s9 == s0 ? -1 + s38 : s13;
int s40 = s41;
int s43 = s0 == s9 ? -1 + s40 : -1 + s38;
int s42 = s43;
map<int, KeyValuePair<int, int>> s48 = __move(__move(s19{[unchecked(0)] = s19[-1 + s38]}, s38){[unchecked(-1)] = s18}, -s38);
map<int, KeyValuePair<int, int>> s47 = s15 == s4 ? s48 : s31;
map<int, KeyValuePair<int, int>> s46 = s47;
map<int, KeyValuePair<int, int>> s45 = s4 == s15 ? __move(__move(s46{[unchecked(0)] = s46[-1 + s40]}, s40){[unchecked(-1)] = s46[0]}, -s40) : s48;
KeyValuePair<int, int> s44 = s45[0];
KeyValuePair<int, int> s50 = -s40 == -1 ? s46[0] : s46[-1 + s40];
KeyValuePair<int, int> s49 = s50;
return pairs != (KeyValuePair<int, int>[])null && -11 < pairs[0].key && -11 < pairs[1].key && 
                                                                        pairs[0].key < 11 && pairs[1].key < 11 && (pairs[0].key >= pairs[1].key || pairs[1].key < pairs[0].key) && bhTuple != (Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>>)null && 
                                                                                                                                                                                   s0 != (BinaryHeap<int, int>)null && s4 != (KeyValuePair<int, int>[])null && 1 < s4.Length && s9 != (BinaryHeap<int, int>)null && 
                                                                                                                                                                                                                                                                                s11 != 1 && 0 < s11 && 0 < -1 + s11 && s15 != (KeyValuePair<int, int>[])null && s15.Length != 0 && (uint)(-1 + s11) < (uint)(s15.Length) && -1 + s11 < 2 && s17 == s24 && s17 == s27.key && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s33 - s11 == -1 && s4.Length == s15.Length && 0 < s33 && s35 != int.MaxValue && s35 != 0 && -1 < s35 && s35 / 10 != 0 && s35 / 10 / 10 == 0 && s36.value == 0 && s33 < 2 && s24 != int.MaxValue && 
s24 != 0 && -1 < s24 && s24 / 10 != 0 && s24 / 10 / 10 == 0 && s25.value == 0 && 48 + s35 / 10 % 10 == 48 + s24 / 10 % 10 && 48 + s35 % 10 == 48 + s24 % 10 && s27.value == 0 && pairs.Length == 2 && 
s38 == 2 && s40 == 2 && s42 == 1 && capacity == 1 && s42 - s40 == -1 && s44.key / 10 / 10 == 0 && s44.value == 0 && s49.key / 10 / 10 == 0 && s49.value == 0 && s18.value == 0 && s46[0].value == 0;
]]></pathCondition>
</generatedTest>
<log level="message" time="2018-11-16 15:09:19Z" category="coverage" message="coverage increased from 9 to 49 blocks (+40) after flipping QuickGraph.BinaryHeap`2.ResizeArray at 0x0016"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<log level="message" time="2018-11-16 15:09:19Z" category="symbols" message="could not load symbols for C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<generatedTest id="dab44d93-23e6-490e-aee7-a8eda619e54d" index="3" run="19" exceptionState="unexpected" status="exception" failed="true" failureText="Exception not validated by documented, contract requires failure at type-under-test surface." generated="true" new="true" assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumCommThrowsInvalidOperationException789"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="ffffffff" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="ffffffff" namespace="QuickGraphTest"/>
</type>
</parameter>
<rcov name="Block" dcov="1" dtot="0" acov="50" atot="103"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="bhTuple">(QuickGraph.BinaryHeap`2[System.Int32,System.Int32], QuickGraph.BinaryHeap`2[System.Int32,System.Int32])</value>
<value name="$input_Count">1</value>
<value name="$input_Capacity">1</value>
<value name="$input_MinimumPriority">10</value>
<code><![CDATA[Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> tuple;
KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(10, default(int));
keyValuePairs[0] = s0;
tuple = BinaryHeapFactory.CreateBinaryHeapKeyValPair(keyValuePairs, 1);
this.PUT_CommutativityMinimumRemoveMinimumComm(tuple);
]]></code>
<methodCode imports="QuickGraph;System;System.Collections.Generic;QuickGraphTest.Factories;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(BinaryHeapCommuteTest))]
[PexRaisedException(typeof(InvalidOperationException))]
public void PUT_CommutativityMinimumRemoveMinimumCommThrowsInvalidOperationException789()
{
    Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> tuple;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(10, default(int));
    keyValuePairs[0] = s0;
    tuple = BinaryHeapFactory.CreateBinaryHeapKeyValPair(keyValuePairs, 1);
    this.PUT_CommutativityMinimumRemoveMinimumComm(tuple);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="QuickGraphTest" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraphTest.dll"/>
<reference name="QuickGraph" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraph.dll"/>
<exceptionChain><exception typeDisplayName="InvalidOperationException" source="QuickGraph"><message><![CDATA[Operation is not valid due to the current state of the object.]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="InvalidOperationException" token="2000100" namespace="System"/>
</type>
<stackTrace><frame value="  at BinaryHeap`2.Minimum() in d:\experimental3\BenchmarksAll\QuickGraph\QuickGraph\BinaryHeap.cs(108)" method="BinaryHeap`2.Minimum()" offset="22" file="d:\experimental3\BenchmarksAll\QuickGraph\QuickGraph\BinaryHeap.cs" line="108"><method assemblyName="QuickGraph" name="Minimum" token="600000a"><declaringType assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="KeyValuePair`2" token="20004ae" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</resultType>
</method>
<beforeSource><![CDATA[        {
            //NotpAssume.IsTrue(this.count >0);
            if (this.count == 0)]]></beforeSource>
<source><![CDATA[                throw new InvalidOperationException();]]></source>
<afterSource><![CDATA[            return this.items[0];
        }
]]></afterSource>
</frame>
<frame value="  at BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;) in d:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\BinaryHeapCommuteTest.cs(746)" method="BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;)" offset="142" file="d:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\BinaryHeapCommuteTest.cs" line="746"><method assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumComm" token="6000017"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
</type>
</parameter>
<parameter name="bhTuple" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            var rm1 = bh1.RemoveMinimum();

            var rm2 = bh2.RemoveMinimum();]]></beforeSource>
<source><![CDATA[            var m2 = bh2.Minimum();]]></source>
<afterSource><![CDATA[
            NotpAssume.IsTrue(m1.Key == m2.Key && m1.Value == m2.Value && rm1.Key == rm2.Key && rm1.Value == rm2.Value && eq.Equals(bh1, bh2));
            PexAssert.IsTrue(m1.Key == m2.Key && m1.Value == m2.Value && rm1.Key == rm2.Key && rm1.Value == rm2.Value && eq.Equals(bh1, bh2));]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<fix rank="5" testid="dab44d93-23e6-490e-aee7-a8eda619e54d" kind="precondition" shortMethodNameWithParameters="BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;)" imports="Microsoft.ExtendedReflection.Collections.SafeSet`1[System.String]"><reference name="Microsoft.Pex.Framework"/>
<reference name="mscorlib"/>
<reference name="Microsoft.ExtendedReflection"/>
<method><definition assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumComm" token="6000017"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="2000002" namespace="QuickGraphTest"/>
</type>
</parameter>
<parameter name="bhTuple" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Tuple`2" token="2000061" namespace="System"><genericParameter value="T1"/>
<genericParameter value="T2"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="QuickGraph" name="BinaryHeap`2" token="2000002" namespace="QuickGraph"><genericParameter value="TPriority"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fb" namespace="System"/>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
</definition>
</method>
<code><![CDATA[int s0 = bhTuple.Item2 == bhTuple.Item1 ?
           -1 + bhTuple.Item1.count : bhTuple.Item2.count;
PexAssume.IsTrue(s0 != 1, "complex reason");
]]></code>
</fix>
<pathCondition><![CDATA[Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> s2 = new;
BinaryHeap<int, int> s3 = new;
BinaryHeap<int, int> s1 = bhTuple == s2 ? s3 : bhTuple.m_Item1;
BinaryHeap<int, int> s0 = s1;
BinaryHeap<int, int> s6 = new;
BinaryHeap<int, int> s5 = s0 == s3 ? s3 : s0 == s6 ? s6 : (BinaryHeap<int, int>)(s0.items);
BinaryHeap<int, int> s4 = s5;
BinaryHeap<int, int> s8 = bhTuple == s2 ? s6 : bhTuple.m_Item2;
BinaryHeap<int, int> s7 = s8;
BinaryHeap<int, int> s10 = s7 == s3 ? s3 : s7 == s6 ? s6 : (BinaryHeap<int, int>)(s7.items);
BinaryHeap<int, int> s9 = s10;
int s11 = s0 == s3 ? 1 : s0 == s6 ? 1 : s0.count;
int s13 = s7 == s3 ? 1 : s7 == s6 ? 1 : s7.count;
int s12 = s7 == s0 ? 0 : s13;
return capacity < 11 && 0 < capacity && pairs != (KeyValuePair<int, int>[])null && 
                                        -11 < pairs[0].key && pairs[0].key < 11 && bhTuple != (Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>>)null && s0 != (BinaryHeap<int, int>)null && s4 != (BinaryHeap<int, int>)null && 
                                                                                                                                                                                             ((Array)s4).Length != 0 && s7 != (BinaryHeap<int, int>)null && s9 != (BinaryHeap<int, int>)null && ((Array)s9).Length != 0 && pairs.Length == 1 && s11 == 1 && s12 == 1;
]]></pathCondition>
</generatedTest>
<log level="message" time="2018-11-16 15:09:20Z" category="coverage" message="coverage increased from 49 to 50 blocks (+1) after flipping QuickGraphTest.BinaryHeapCommuteTest.PUT_CommutativityMinimumRemoveMinimumComm at 0x0002"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.03"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<generatedTest id="e0acb38b-ca05-4679-b5d4-a071bf10036f" index="4" run="26" status="normaltermination" generated="true" new="true" assemblyName="QuickGraphTest" name="PUT_CommutativityMinimumRemoveMinimumComm219"><declaringType assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="ffffffff" namespace="QuickGraphTest"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="QuickGraphTest" name="BinaryHeapCommuteTest" token="ffffffff" namespace="QuickGraphTest"/>
</type>
</parameter>
<rcov name="Block" dcov="6" dtot="0" acov="56" atot="103"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="bhTuple">(QuickGraph.BinaryHeap`2[System.Int32,System.Int32], QuickGraph.BinaryHeap`2[System.Int32,System.Int32])</value>
<value name="$input_Count">3</value>
<value name="$input_Capacity">3</value>
<value name="$input_MinimumPriority">1</value>
<value name="result(bhTuple)">(QuickGraph.BinaryHeap`2[System.Int32,System.Int32], QuickGraph.BinaryHeap`2[System.Int32,System.Int32])</value>
<code><![CDATA[Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> tuple;
KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[3];
KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(2, default(int));
keyValuePairs[0] = s0;
KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(1, default(int));
keyValuePairs[1] = s1;
KeyValuePair<int, int> s2 = new KeyValuePair<int, int>(1, default(int));
keyValuePairs[2] = s2;
tuple = BinaryHeapFactory.CreateBinaryHeapKeyValPair(keyValuePairs, 1);
this.PUT_CommutativityMinimumRemoveMinimumComm(tuple);
Assert.IsNotNull((object)tuple);
Assert.IsNotNull(tuple.Item1);
Assert.IsNotNull(tuple.Item1.PriorityComparison);
Assert.AreEqual<int>(3, tuple.Item1.Capacity);
Assert.AreEqual<int>(2, tuple.Item1.Count);
Assert.IsNotNull(tuple.Item2);
Assert.IsNotNull(tuple.Item2.PriorityComparison);
Assert.AreEqual<int>(3, tuple.Item2.Capacity);
Assert.AreEqual<int>(2, tuple.Item2.Count);
]]></code>
<methodCode imports="QuickGraph;System;System.Collections.Generic;QuickGraphTest.Factories;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(BinaryHeapCommuteTest))]
public void PUT_CommutativityMinimumRemoveMinimumComm219()
{
    Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> tuple;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[3];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(2, default(int));
    keyValuePairs[0] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[1] = s1;
    KeyValuePair<int, int> s2 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[2] = s2;
    tuple = BinaryHeapFactory.CreateBinaryHeapKeyValPair(keyValuePairs, 1);
    this.PUT_CommutativityMinimumRemoveMinimumComm(tuple);
    Assert.IsNotNull((object)tuple);
    Assert.IsNotNull(tuple.Item1);
    Assert.IsNotNull(tuple.Item1.PriorityComparison);
    Assert.AreEqual<int>(3, tuple.Item1.Capacity);
    Assert.AreEqual<int>(2, tuple.Item1.Count);
    Assert.IsNotNull(tuple.Item2);
    Assert.IsNotNull(tuple.Item2.PriorityComparison);
    Assert.AreEqual<int>(3, tuple.Item2.Capacity);
    Assert.AreEqual<int>(2, tuple.Item2.Count);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="QuickGraphTest" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraphTest.dll"/>
<reference name="QuickGraph" location="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\QuickGraph.dll"/>
<pathCondition><![CDATA[Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>> s2 = new;
BinaryHeap<int, int> s3 = new;
BinaryHeap<int, int> s1 = bhTuple == s2 ? s3 : bhTuple.m_Item1;
BinaryHeap<int, int> s0 = s1;
KeyValuePair<int, int>[] s6 = new;
BinaryHeap<int, int> s7 = new;
KeyValuePair<int, int>[] s8 = new;
KeyValuePair<int, int>[] s5 = s0 == s3 ? s6 : s0 == s7 ? s8 : s0.items;
KeyValuePair<int, int>[] s4 = s5;
BinaryHeap<int, int> s9 = s0 == s3 ? s3 : s0 == s7 ? s7 : (BinaryHeap<int, int>)(s0.priorityComparison);
KeyValuePair<int, int> s14 = default(KeyValuePair<int, int>){.key = pairs[0].key, .value = pairs[0].value};
map<int, KeyValuePair<int, int>> s13 = {default(KeyValuePair<int, int>)}{[unchecked(0)] = s14};
map<int, KeyValuePair<int, int>> s15 = {default(KeyValuePair<int, int>)}{[unchecked(1)] = s14, 
                                                                         [unchecked(0)] = default(KeyValuePair<int, int>){.key = pairs[2].key, .value = pairs[2].value}, [unchecked(2)] = default(KeyValuePair<int, int>){.key = pairs[1].key, .value = pairs[1].value}};
map<int, KeyValuePair<int, int>> s12 = s4 == (KeyValuePair<int, int>[])s3 ? s13 : s4 == s6 ? s15 : s4 == (KeyValuePair<int, int>[])s7 ? s13 : s4 == s8 ? s15 : s4;
map<int, KeyValuePair<int, int>> s11 = s12;
int s10 = s11[1].key;
BinaryHeap<int, int> s17 = bhTuple == s2 ? s7 : bhTuple.m_Item2;
BinaryHeap<int, int> s16 = s17;
int s21 = s16 == s3 ? 3 : s16 == s7 ? 3 : s16.count;
int s20 = s21;
int s19 = s16 == s0 ? 2 : s20;
int s18 = s19;
KeyValuePair<int, int>[] s23 = s16 == s3 ? s6 : s16 == s7 ? s8 : s16.items;
KeyValuePair<int, int>[] s22 = s23;
BinaryHeap<int, int> s24 = s16 == s3 ? s3 : s16 == s7 ? s7 : (BinaryHeap<int, int>)(s16.priorityComparison);
map<int, KeyValuePair<int, int>> s31 = __move(__move(s11{[unchecked(0)] = s11[2]}, unchecked(3)){[unchecked(-1)] = s11[0]}, unchecked(-3));
map<int, KeyValuePair<int, int>> s33 = s22 == (KeyValuePair<int, int>[])s3 ? s13 : s22 == s6 ? s15 : s22 == (KeyValuePair<int, int>[])s7 ? s13 : s22 == s8 ? s15 : s22;
map<int, KeyValuePair<int, int>> s32 = s33;
map<int, KeyValuePair<int, int>> s30 = s22 == s4 ? s31 : s32;
map<int, KeyValuePair<int, int>> s29 = s30;
KeyValuePair<int, int> s28 = s29[0];
KeyValuePair<int, int> s27 = 1 - s18 == -1 ? s28 : s29[1];
KeyValuePair<int, int> s26 = s27;
int s25 = s26.key;
KeyValuePair<int, int> s36 = -s18 == -1 ? s28 : s29[-1 + s18];
KeyValuePair<int, int> s35 = s36;
int s34 = s35.key;
int s38 = s0 == s16 ? -1 + s18 : 2;
int s37 = s38;
map<int, KeyValuePair<int, int>> s42 = s4 == s22 ? __move(__move(s29{[unchecked(0)] = s29[-1 + s18]}, s18){[unchecked(-1)] = s28}, -s18) : s31;
map<int, KeyValuePair<int, int>> s41 = s42;
KeyValuePair<int, int> s40 = s41[0];
int s39 = s40.key;
int s44 = s0 == s3 ? 3 : s0 == s7 ? 3 : s0.count;
int s43 = s44;
int s46 = s16 == s0 ? -1 + s43 : s20;
int s45 = s46;
int s48 = s0 == s16 ? -1 + s45 : -1 + s43;
int s47 = s48;
map<int, KeyValuePair<int, int>> s54 = __move(__move(s11{[unchecked(0)] = s11[-1 + s43]}, s43){[unchecked(-1)] = s11[0]}, -s43);
map<int, KeyValuePair<int, int>> s53 = s22 == s4 ? s54 : s32;
map<int, KeyValuePair<int, int>> s52 = s53;
map<int, KeyValuePair<int, int>> s51 = s4 == s22 ? __move(__move(s52{[unchecked(0)] = s52[-1 + s45]}, s45){[unchecked(-1)] = s52[0]}, -s45) : s54;
map<int, KeyValuePair<int, int>> s50 = s51;
KeyValuePair<int, int> s49 = s50[0];
KeyValuePair<int, int> s56 = -s45 == -1 ? s52[0] : s52[-1 + s45];
KeyValuePair<int, int> s55 = s56;
KeyValuePair<int, int> s58 = 1 - s45 == -1 ? s52[0] : s52[1];
KeyValuePair<int, int> s57 = s58;
return pairs != (KeyValuePair<int, int>[])null && 
       -11 < pairs[0].key && -11 < pairs[1].key && -11 < pairs[2].key && pairs[0].key < 11 && pairs[1].key < 11 && pairs[2].key < 11 && (pairs[0].key >= pairs[1].key || pairs[1].key < pairs[0].key) && 
                                                                                                                                        (pairs[1].key >= pairs[2].key || pairs[2].key < pairs[1].key) && bhTuple != (Tuple<BinaryHeap<int, int>, BinaryHeap<int, int>>)null && 
                                                                                                                                                                                                         s0 != (BinaryHeap<int, int>)null && s4 != (KeyValuePair<int, int>[])null && 2 < s4.Length && 1 < s4.Length && s9 != (BinaryHeap<int, int>)null && (s11[2].key < s10 || s10 >= s11[2].key) && 
                                                                                                                                                                                                                                                                                                                                                           s16 != (BinaryHeap<int, int>)null && s18 != 1 && 0 < s18 && s22 != (KeyValuePair<int, int>[])null && (uint)(-1 + s18) < (uint)(s22.Length) && 1 < -1 + s18 && 1 < s22.Length && 
s24 != (BinaryHeap<int, int>)null && (s34 < s25 || s25 >= s34) && -1 + s18 < 3 && s11[0].key == s34 && s11[0].key == s28.key && s37 - s18 == -1 && s4.Length == s22.Length && s39 != int.MaxValue && 
s39 != 0 && -1 < s39 && s39 / 10 == 0 && s40.value == 0 && 1 < s37 && s41[1].key != int.MaxValue && s41[1].key != 0 && -1 < s41[1].key && s41[1].key / 10 == 0 && s41[1].value == 0 && s37 < 3 && 
s34 != int.MaxValue && s34 != 0 && -1 < s34 && s34 / 10 == 0 && s35.value == 0 && s25 != int.MaxValue && s25 != 0 && -1 < s25 && s25 / 10 == 0 && s26.value == 0 && 48 + s39 % 10 == 48 + s34 % 10 && 
s41[1].key % 10 == 48 + s25 % 10 && s28.value == 0 && pairs.Length == 3 && s43 == 3 && s45 == 3 && s47 == 2 && capacity == 1 && s47 - s45 == -1 && s49.key / 10 == 0 && 
s49.value == 0 && s50[1].key / 10 == 0 && s50[1].value == 0 && s55.key / 10 == 0 && s55.value == 0 && s57.key / 10 == 0 && s57.value == 0 && s11[0].value == 0 && s52[0].value == 0;
]]></pathCondition>
</generatedTest>
<log level="message" time="2018-11-16 15:09:22Z" category="coverage" message="coverage increased from 50 to 56 blocks (+6) after flipping &lt;unknown method&gt; at 0x&lt;unknown offset&gt;"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.02"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.02"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<log level="message" time="2018-11-16 15:09:27Z" category="progress" message="   43 runs, 56/103 blocks covered"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.02"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.00"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.01"/>
<test name="PUT_CommutativityMinimumRemoveMinimumComm" state="success" duration="0.02"/>
<coverage domain="usercodeundertest" unit="block" covered="56" total="103" coveredRatio="0.5436893203883495"/>
<log level="message" time="2018-11-16 15:09:36Z" category="symbols" message="could not load symbols for C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<sourceCoverage xml="cov\e305\cov.xml" html="cov\e305\cov.html"/>
<result name="PUT_CommutativityMinimumRemoveMinimumComm(Tuple`2&lt;BinaryHeap`2&lt;Int32,Int32&gt;,BinaryHeap`2&lt;Int32,Int32&gt;&gt;)" state="success" duration="19.864965"/>
<duration start="2018-11-16 15:09:16Z" end="2018-11-16 15:09:36Z" seconds="19.901003"/>
<trajectory><image src="fix\quickgraphtestbi636779561764581074.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<generatedFixture type="BinaryHeapCommuteTest" src="D:\experimental3\BenchmarksAll\QuickGraph\QuickGraphTest\bin\Debug\myreport\rep\tests\BinaryHeapCommuteTestPUT_CommutativityMi.g.cs"/>
<coverage domain="usercodeundertest" unit="block" covered="56" total="103" coveredRatio="0.5436893203883495"/>
<sourceCoverage xml="cov\t101\cov.xml" html="cov\t101\cov.html"/>
<duration start="2018-11-16 15:09:16Z" end="2018-11-16 15:09:36Z" seconds="20.0110022"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="56" total="103" coveredRatio="0.5436893203883495"/>
<sourceCoverage xml="cov\a63456340\cov.xml" html="cov\a63456340\cov.html"/>
<duration start="2018-11-16 15:09:16Z" end="2018-11-16 15:09:36Z" seconds="20.0880016"/>
<frameTreeRef exceptionCount="1"/>
</assembly>
<duration start="2018-11-16 15:09:15Z" end="2018-11-16 15:09:36Z" seconds="20.6610004"/>
<background/>
</pex>

<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Targets>
  <Target Name="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\bin\Debug\Dsa.dll">
   <Modules>
    <Module Name="dsa.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Dsa.dll' with a strong name key.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Dsa.Algorithms">
       <Types>
        <Type Name="Base" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'Base' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">The constituent members of 'Base' appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Searching" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProbabilitySearch`1(System.Collections.Generic.IList`1&lt;!!0&gt;,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Searching.cs" Line="70">In externally visible method 'Searching.ProbabilitySearch&lt;T&gt;(this IList&lt;T&gt;, T)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SequentialSearch`1(System.Collections.Generic.IList`1&lt;!!0&gt;,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Searching.cs" Line="35">In externally visible method 'Searching.SequentialSearch&lt;T&gt;(this IList&lt;T&gt;, T)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Sets" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Permutations`1(Dsa.DataStructures.OrderedSet`1&lt;!!0&gt;,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sets.cs" Line="35">In externally visible method 'Sets.Permutations&lt;T&gt;(this OrderedSet&lt;T&gt;, int)', validate parameter 'set' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Sorting" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BubbleSort`1(System.Collections.Generic.IList`1&lt;!!0&gt;,Dsa.Algorithms.SortType)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="38">In externally visible method 'Sorting.BubbleSort&lt;T&gt;(this IList&lt;T&gt;, SortType)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Concatenate`1(System.Collections.Generic.IList`1&lt;!!0&gt;,System.Collections.Generic.IList`1&lt;!!0&gt;,System.Collections.Generic.IList`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="184">In externally visible method 'Sorting.Concatenate&lt;T&gt;(IList&lt;T&gt;, IList&lt;T&gt;, IList&lt;T&gt;)', validate parameter 'first' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="189">In externally visible method 'Sorting.Concatenate&lt;T&gt;(IList&lt;T&gt;, IList&lt;T&gt;, IList&lt;T&gt;)', validate parameter 'second' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="194">In externally visible method 'Sorting.Concatenate&lt;T&gt;(IList&lt;T&gt;, IList&lt;T&gt;, IList&lt;T&gt;)', validate parameter 'third' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertionSort`1(System.Collections.Generic.IList`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="236">In externally visible method 'Sorting.InsertionSort&lt;T&gt;(this IList&lt;T&gt;)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MedianLeft`1(System.Collections.Generic.IList`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="80">In externally visible method 'Sorting.MedianLeft&lt;T&gt;(this IList&lt;T&gt;)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MergeOrdered`1(System.Collections.Generic.IList`1&lt;!!0&gt;,System.Collections.Generic.IList`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="121">In externally visible method 'Sorting.MergeOrdered&lt;T&gt;(IList&lt;T&gt;, IList&lt;T&gt;)', validate parameter 'first' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="121">In externally visible method 'Sorting.MergeOrdered&lt;T&gt;(IList&lt;T&gt;, IList&lt;T&gt;)', validate parameter 'second' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RadixSort(System.Collections.Generic.IList`1&lt;System.String&gt;,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="keySize-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="310">Correct the potential overflow in the operation 'keySize-1' in 'Sorting.RadixSort(this IList&lt;string&gt;, int)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="306">In externally visible method 'Sorting.RadixSort(this IList&lt;string&gt;, int)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShellSort`1(System.Collections.Generic.IList`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Sorting.cs" Line="267">In externally visible method 'Sorting.ShellSort&lt;T&gt;(this IList&lt;T&gt;)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Strings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Any(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Strings.cs" Line="68">In externally visible method 'Strings.Any(this string, string)', validate parameter 'word' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Strings.cs" Line="76">In externally visible method 'Strings.Any(this string, string)', validate parameter 'match' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RepeatedWordCount(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Strings.cs" Line="276">In externally visible method 'Strings.RepeatedWordCount(this string)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Reverse(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Strings.cs" Line="34">In externally visible method 'Strings.Reverse(this string)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReverseWords(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Strings.cs" Line="220">In externally visible method 'Strings.ReverseWords(this string)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Strip(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Strings.cs" Line="141">In externally visible method 'Strings.Strip(this string)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WordCount(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Algorithms" File="Strings.cs" Line="168">In externally visible method 'Strings.WordCount(this string)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Dsa.DataStructures">
       <Types>
        <Type Name="AvlTree`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FindMaxValue(Dsa.DataStructures.AvlTreeNode`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="AvlTree.cs" Line="271">The 'this' parameter (or 'Me' in Visual Basic) of 'AvlTree&lt;T&gt;.FindMaxValue(AvlTreeNode&lt;T&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="AvlTree.cs" Line="200">Modify 'AvlTree&lt;T&gt;.Remove(T)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveNode(Dsa.DataStructures.AvlTreeNode`1&lt;!0&gt;,!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="AvlTree.cs" Line="217">'AvlTree&lt;T&gt;.RemoveNode(AvlTreeNode&lt;T&gt;, T)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CollectionBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CopyCollection(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="CollectionBase.cs" Line="171">In externally visible method 'CollectionBase&lt;T&gt;.CopyCollection(IEnumerable&lt;T&gt;)', validate parameter 'collection' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CommonBinaryTree`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'CommonBinaryTree&lt;TNode, TValue&gt;' to protected.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DoublyLinkedList`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddAfter(Dsa.DataStructures.DoublyLinkedListNode`1&lt;!0&gt;,!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="DoublyLinkedList.cs" Line="140">In externally visible method 'DoublyLinkedList&lt;T&gt;.AddAfter(DoublyLinkedListNode&lt;T&gt;, T)', validate parameter 'node' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddBefore(Dsa.DataStructures.DoublyLinkedListNode`1&lt;!0&gt;,!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="DoublyLinkedList.cs" Line="173">In externally visible method 'DoublyLinkedList&lt;T&gt;.AddBefore(DoublyLinkedListNode&lt;T&gt;, T)', validate parameter 'node' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateAddArgs(Dsa.DataStructures.DoublyLinkedListNode`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="DoublyLinkedList.cs" Line="405">The 'this' parameter (or 'Me' in Visual Basic) of 'DoublyLinkedList&lt;T&gt;.ValidateAddArgs(DoublyLinkedListNode&lt;T&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="node" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="DoublyLinkedList.cs" Line="405">Parameter 'node' of 'DoublyLinkedList&lt;T&gt;.ValidateAddArgs(DoublyLinkedListNode&lt;T&gt;)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SinglyLinkedList`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddAfter(Dsa.DataStructures.SinglyLinkedListNode`1&lt;!0&gt;,!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\DataStructures" File="SinglyLinkedList.cs" Line="131">In externally visible method 'SinglyLinkedList&lt;T&gt;.AddAfter(SinglyLinkedListNode&lt;T&gt;, T)', validate parameter 'node' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Dsa.Utility">
       <Types>
        <Type Name="Compare" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AreEqual`1(!!0,!!0,System.Collections.Generic.IComparer`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Utility" File="Compare.cs" Line="52">In externally visible method 'Compare.AreEqual&lt;T&gt;(T, T, IComparer&lt;T&gt;)', validate parameter 'comparer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsGreaterThan`1(!!0,!!0,System.Collections.Generic.IComparer`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Utility" File="Compare.cs" Line="39">In externally visible method 'Compare.IsGreaterThan&lt;T&gt;(T, T, IComparer&lt;T&gt;)', validate parameter 'comparer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLessThan`1(!!0,!!0,System.Collections.Generic.IComparer`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2018-11-12 08:06:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\experimental3\BenchmarksAll\eval-dsa\Dsa\Utility" File="Compare.cs" Line="26">In externally visible method 'Compare.IsLessThan&lt;T&gt;(T, T, IComparer&lt;T&gt;)', validate parameter 'comparer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182126(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
   <Name>Enums should have zero value</Name>
   <Description>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</Description>
   <Resolution Name="NotFlagsNoZeroValue">Add a member to {0} that has a value of zero with a suggested name of 'None'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182149(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027">
   <Name>Mark enums with FlagsAttribute</Name>
   <Description>The enumeration appears to be made up of combinable flags. If this true, apply the Flags attribute to the enumeration.</Description>
   <Resolution Name="Default">The constituent members of {0} appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182159(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182354(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
